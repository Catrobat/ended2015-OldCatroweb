<project name="Selenium Grid Common Build Tasks">

  <description>Selenium Grid Common Build Tasks</description>

  <tstamp/>

  <property name="build.src" location="src/main/java"/>
  <property name="build.output" location="target/classes"/>
  <property name="dist" location="${basedir}/target/dist"/>
  <property name="test.src" location="src/test/unit/java"/>
  <property name="test.functional.output" location="target/test-functional-classes"/>
  <property name="test.functional.src" location="src/test/functional"/>
  <property name="test.output" location="target/test-classes"/>
  <property name="test.reports" location="target/test-reports"/>
  <property name="metrics.reports" location="target/metrics"/>
  <property name="metrics.pmd.reports" location="${metrics.reports}/pmd"/>
  <property name="metrics.coverage.reports" location="${metrics.reports}/coverage"/>
  <property environment="env"/>

  <path id="mocking.classpath">
    <fileset dir="${rootdir}/vendor">
      <include name="jbehave-1.0.1.jar"/>
      <include name="jmock-junit4-2.2.0.jar"/>
      <include name="jmock-legacy-2.2.0.jar"/>
      <include name="proxytoys-0.2.1.jar"/>
      <include name="objenesis-1.0.jar"/>
      <include name="jmock-2.2.0.jar"/>
      <include name="cglib-nodep-2.1_3.jar"/>
      <include name="mockito-all-1.8.4.jar"/>
    </fileset>
  </path>

  <path id="junit.core.classpath">
    <fileset dir="${rootdir}/vendor">
      <include name="junit-4.7.jar"/>
    </fileset>
    <pathelement location="${build.output}"/>
    <pathelement path="${java.class.path}/"/>
  </path>

  <path id="junit.classpath" />
  
  <path id="unit-testing.classpath">
    <path refid="compile.classpath"/>
    <path refid="junit.core.classpath"/>
    <path refid="junit.classpath"/>
    <path refid="mocking.classpath"/>
    <path refid="cobertura.classpath"/>
    <pathelement location="${build.output}"/>
    <pathelement location="${test.output}"/>
  </path>

  <path id="functional-testing.classpath">
    <path refid="compile.classpath"/>
    <path refid="junit.core.classpath"/>
    <path refid="junit.classpath"/>
    <path refid="mocking.classpath"/>
    <path refid="cobertura.classpath"/>
    <pathelement location="${build.output}"/>
    <pathelement location="${test.functional.output}"/>
  </path>

  <path id="pmd.classpath">
      <fileset dir="${rootdir}/vendor">
        <include name="pmd-4.2.2.jar"/>
        <include name="jaxen-1.1.1.jar"/>
        <include name="asm-3.1.jar"/>
      </fileset>
    <pathelement path="${java.class.path}/"/>
  </path>

  <path id="cobertura.classpath">
      <fileset dir="${rootdir}/vendor">
        <include name="cobertura-1.9.jar"/>
        <include name="log4j-1.2.9.jar"/>
        <include name="asm-2.2.1.jar"/>
        <include name="asm-tree-2.2.1.jar"/>
        <include name="jakarta-oro-2.0.8.jar"/>
      </fileset>
    <pathelement path="${java.class.path}/"/>
  </path>

  <target name="package-standalone" depends="package"/>
  <target name="build" depends="test"/>
  <target name="dist" depends="package-standalone"/>

  <target name="clean" description="Remove generated artifacts">
    <delete dir="target"/>
  </target>

  <target name="compile" description="compile the source ">
    <mkdir dir="${build.output}"/>
    <javac srcdir="${build.src}"
           destdir="${build.output}"
           debug="true"
           source="1.5"
           target="1.5">
      <classpath refid="compile.classpath"/>
    </javac>
    <copy todir="${build.output}" verbose="true">
      <fileset dir="${build.src}" includes="**/*.html"/>
      <fileset dir="${build.src}" includes="**/*.yml"/>
      <fileset dir="${build.src}" includes="**/heartbeat"/>
    </copy>
  </target>

  <target name="compile-unit-tests" depends="compile" description="compile tests">
    <mkdir dir="${test.output}"/>
    <mkdir dir="${test.reports}"/>

    <javac srcdir="${test.src}"
           destdir="${test.output}"
           excludes="**/package.html"
           source="1.5"
           target="1.5"
           debug="true"
           deprecation="true">
      <classpath refid="unit-testing.classpath"/>
    </javac>
  </target>

  <macrodef name="run-unit-tests">
    <element name="options" optional="true"/>
    <sequential>
      <mkdir dir="${test.output}"/>
      <mkdir dir="${test.reports}"/>

      <copy todir="${test.output}" verbose="true">
        <fileset dir="${test.src}" includes="**/*.html"/>
      </copy>
      <junit printSummary="no" haltonerror="true" haltonfailure="true" fork="true" dir="${test.reports}">
        <options/>
        <classpath refid="unit-testing.classpath"/>
        <formatter type="xml"/>
        <formatter type="plain"/>
        <batchtest todir="${test.reports}">
          <fileset dir="${test.src}">
            <include name="**/*Test.java"/>
          </fileset>
        </batchtest>
      </junit>
    </sequential>
  </macrodef>

  <target name="compile-functional-tests" depends="compile" description="compile tests">
    <mkdir dir="${test.functional.output}"/>
    <mkdir dir="${test.reports}"/>

    <javac srcdir="${test.functional.src}"
           destdir="${test.functional.output}"
           excludes="**/package.html"
           source="1.5"
           target="1.5"
           debug="true"
           deprecation="true">
      <classpath refid="functional-testing.classpath"/>
    </javac>
  </target>

  <macrodef name="run-functional-tests">
    <element name="options" optional="true"/>
    <sequential>
      <mkdir dir="${test.functional.output}"/>
      <mkdir dir="${test.reports}"/>

      <copy todir="${test.functional.output}" verbose="true">
        <fileset dir="${test.functional.src}" includes="**/*.html"/>
      </copy>
      <junit printSummary="no" haltonerror="true" haltonfailure="true" fork="true" dir="${test.reports}">
        <options/>
        <classpath refid="functional-testing.classpath"/>
        <formatter type="xml"/>
        <formatter type="plain"/>
        <batchtest todir="${test.reports}">
          <fileset dir="${test.functional.src}">
            <include name="**/*Test.java"/>
          </fileset>
        </batchtest>
      </junit>
    </sequential>
  </macrodef>

  <target name="test-unit" depends="compile, compile-unit-tests" description="run unit tests">
    <run-unit-tests/>
  </target>

  <target name="test-functional" depends="compile" if="${test.functional.src.exists}"
          description="run functional tests">
    <antcall target="compile-functional-tests" />
    <run-functional-tests />
  </target>

  <target name="test" depends="test-unit" description="run unit and functional tests" >
    <available file="${test.functional.src}" property="test.functional.src.exists" />
    <antcall target="test-functional" />
  </target>

  <target name="package" depends="test" description="Package as a jar">
    <mkdir dir="${dist}/lib"/>
    <jar jarfile="${dist}/lib/${artifact}-${version}.jar" basedir="${build.output}">
      <manifest>
        <attribute name="Main-Class" value="com.thoughtworks.selenium.grid.hub.HubServer"/>
        <attribute name="Built-By" value="OpenQA.org"/>
        <attribute name="Build-Time" value="${DSTAMP}${TSTAMP}"/>
        <section name="common">
          <attribute name="Specification-Title" value="${name}"/>
          <attribute name="Specification-Version" value="${version}"/>
          <attribute name="Specification-Vendor" value="OpenQA.org"/>
        </section>
      </manifest>
    </jar>
  </target>

  <macrodef name="package-standalone-jar">
    <attribute name="main-class"/>
    <element name="dependencies" optional="yes"/>
    <sequential>
      <tstamp/>
      <mkdir dir="${dist}/lib"/>
      <jar jarfile="${dist}/lib/${artifact}-standalone-${version}.jar">
        <manifest>
          <attribute name="Main-Class" value="@{main-class}"/>
          <attribute name="Built-By" value="OpenQA.org"/>
          <attribute name="Build-Time" value="${DSTAMP}${TSTAMP}"/>
          <section name="common">
            <attribute name="Specification-Title" value="${name}"/>
            <attribute name="Specification-Version" value="${version}"/>
            <attribute name="Specification-Vendor" value="OpenQA.org"/>
          </section>
        </manifest>
        <zipfileset src="${dist}/lib/${artifact}-${version}.jar"/>
        <dependencies/>
      </jar>
    </sequential>
  </macrodef>
  
  <target name="pmd-analysis" description="Performs Code Analysis using PMD Inspection Tool">
    <echo message="Performing analysis code using PMD"/>
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath"/>
    <mkdir dir="${metrics.pmd.reports}"/>
    <pmd shortFilenames="true">
      <ruleset>lib/build/pmd-ruleset.xml</ruleset>
      <formatter type="html" toFile="${metrics.pmd.reports}/pmd_report.html"
                 linkPrefix="http://pmd.sourceforge.net/xref/"/>
      <fileset dir="${build.src}">
        <include name="**/*.java"/>
      </fileset>
    </pmd>
  </target>

  <target name="coverage-analysis" depends="compile, compile-unit-tests" description="Gather code coverage metrics">
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

    <delete file="${build.output}/cobertura.ser" />
    
    <cobertura-instrument datafile="${build.output}/cobertura.ser">
      <fileset dir="${build.output}">
        <include name="**/*.class"/>
      </fileset>
    </cobertura-instrument>

    <run-unit-tests>
      <options>
        <sysproperty key="net.sourceforge.cobertura.datafile" file="${build.output}/cobertura.ser" />
        <classpath refid="cobertura.classpath"/>
      </options>
    </run-unit-tests>

    <cobertura-report srcdir="${build.src}" destdir="${metrics.coverage.reports}" datafile="${build.output}/cobertura.ser"/>
  </target>

  <macrodef name="build-subprojects">
    <attribute name="target"/>
    <sequential>
      <subant target="@{target}">
        <filelist dir=".">
          <file name="infrastructure/core/build.xml"/>
          <file name="infrastructure/webserver/build.xml"/>
          <file name="hub/build.xml"/>
          <file name="agent/build.xml"/>
          <file name="remote-control/build.xml"/>
          <file name="tools/build.xml"/>
          <file name="demo/build.xml"/>
          <file name="examples/java-testng/build.xml"/>
          <file name="regression-tests"/>
        </filelist>
      </subant>
    </sequential>
  </macrodef>

</project>
