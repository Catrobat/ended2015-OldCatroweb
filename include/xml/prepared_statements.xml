<?xml version="1.0" encoding="utf-8"?>
<!--
  Catroid: An on-device visual programming system for Android devices
  Copyright (C) 2010-2013 The Catrobat Team
  (<http://developer.catrobat.org/credits>)
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
  
  An additional term exception under section 7 of the GNU Affero
  General Public License, version 3, is available at
  http://developer.catrobat.org/license_additional_term
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
-->

<statements>
    <string name="get_projects_ordered_by_uploadtime">SELECT * FROM projects ORDER BY upload_time DESC</string>
    <string name="get_project_by_id">SELECT projects.*, cusers.username AS uploaded_by FROM projects, cusers WHERE projects.id=$1 AND cusers.id=projects.user_id LIMIT 1</string>
    <string name="get_visible_project_by_id">SELECT projects.*, cusers.username AS uploaded_by FROM projects, cusers WHERE projects.id=$1 AND projects.visible=true AND cusers.id=projects.user_id LIMIT 1</string>
    <string name="insert_new_project">INSERT INTO projects (title, description, upload_ip, upload_language, filesize_bytes, version_name, language_code, user_id) 
    	VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id</string>
    <string name="does_project_already_exist">SELECT projects.* FROM projects WHERE projects.title=$1 AND projects.user_id=$2</string>
    <string name="update_project">UPDATE projects SET description=$1, upload_ip=$2, filesize_bytes=$3, version_name=$4, language_code=$5, update_time=now(), visible=true WHERE projects.id=$6</string>
    <string name="increment_download_counter">UPDATE projects SET download_count=download_count+1 WHERE id=$1</string>
    <string name="increment_view_counter">UPDATE projects SET view_count=view_count+1 WHERE id=$1</string>
    <string name="set_project_new_filename">UPDATE projects SET source=$1 WHERE id=$2</string>
    <string name="delete_project_by_id">DELETE FROM projects WHERE id=$1</string>
    <string name="insert_new_flagged_project">INSERT INTO flagged_projects (project_id, user_id, reason, user_ip) VALUES ($1, $2, $3, $4)</string>
    <string name="get_flags_for_project">SELECT id FROM flagged_projects WHERE project_id=$1 AND resolved=false</string>
    <string name="hide_project">UPDATE projects SET visible=false WHERE id=$1</string>
    <string name="hide_user_project">UPDATE projects SET visible=false WHERE id=$1 AND user_id=$2</string>
    <string name="show_project">UPDATE projects SET visible=true WHERE id=$1</string>
    <string name="set_mail_sent_on_inappropriate">UPDATE flagged_projects SET mail_sent=true WHERE project_id=$1</string>
    <string name="set_resolved_on_inappropriate">UPDATE flagged_projects SET resolved=true WHERE project_id=$1</string>
    <string name="get_flagged_projects_ordered_by_uploadtime">
      SELECT projects.id, projects.title, projects.upload_time, projects.upload_ip, projects.visible, count(projects.id) 
      FROM projects, flagged_projects 
      WHERE projects.id=flagged_projects.project_id AND flagged_projects.mail_sent=true AND flagged_projects.resolved=false 
      GROUP BY projects.id, projects.title, projects.upload_time, projects.upload_ip, projects.visible 
      ORDER BY projects.upload_time DESC
    </string>
    <string name="get_flagged_projects_reason_and_user">
      SELECT fp.user_id, fp.reason, u.username, fp.time 
      FROM flagged_projects fp, cusers u 
      WHERE fp.user_id = u.id
      AND fp.project_id = $1
      ORDER BY fp.time
    </string>
    <string name="has_user_flagged_project">SELECT id FROM flagged_projects WHERE project_id=$1 AND user_id=$2 AND resolved=FALSE</string>
    <string name="update_project_filesize">UPDATE projects SET filesize_bytes=$2 WHERE id=$1</string>

    <string name="add_word_to_wordlist">INSERT INTO wordlist (word, good_meaning, approved) VALUES ($1, $2, $3)</string>
    <string name="get_unapproved_words">SELECT * FROM wordlist WHERE approved = FALSE ORDER BY id DESC</string>
    <string name="get_word_from_wordlist">SELECT * FROM wordlist WHERE word=$1</string>
    <string name="set_word_meaning">UPDATE wordlist SET good_meaning = $1, approved = TRUE WHERE id=$2</string>
    <string name="delete_word_by_id">DELETE FROM wordlist WHERE id=$1</string>
    
    <string name="add_mapping_to_unapproved_words_in_projects">INSERT INTO unapproved_words_in_projects (project_id, word_id) VALUES ($1, $2)</string>
    <string name="get_project_list_containing_insulting_words">SELECT * FROM unapproved_words_in_projects WHERE word_id=$1</string>
    <string name="delete_word_from_list">DELETE FROM unapproved_words_in_projects WHERE word_id=$1</string>

    <string name="get_user_password_hash">SELECT id, username, password, avatar FROM cusers WHERE username_clean=$1 LIMIT 1</string>
    <string name="get_user_token">SELECT auth_token FROM cusers WHERE username_clean=$1 LIMIT 1</string>
    <string name="get_user_device_login">SELECT * FROM cusers WHERE username_clean=$1 AND auth_token=$2 LIMIT 1</string>
    <string name="get_user_row_by_username">SELECT cusers.id, cusers.username, cusers.gender, cusers.country, cusers.city, cusers.language, to_char(cusers.date_of_birth, 'MM') AS month, to_char(cusers.date_of_birth, 'YYYY') AS year, cusers.avatar, (SELECT count(*) FROM projects WHERE projects.user_id=cusers.id) AS project_count FROM cusers WHERE username=$1 LIMIT 1</string>
    <string name="get_user_row_by_username_or_username_clean">SELECT * FROM cusers WHERE username=$1 OR username_clean=$2 LIMIT 1</string>

    <string name="get_user_row_by_email">SELECT DISTINCT u.* FROM cusers u, cusers_additional_email e WHERE u.email=$1 OR (e.email=$1 AND e.user_id=u.id)</string>
    <string name="get_user_row_by_valid_email">SELECT DISTINCT u.* FROM cusers u, cusers_additional_email e WHERE u.email=$1 OR (e.email=$1 AND e.validated=true AND e.user_id=u.id)</string>
    <string name="get_user_language">SELECT language FROM cusers WHERE id=$1</string>
    
    <string name="add_user_email">INSERT INTO cusers_additional_email (user_id, email) VALUES ($1, $2)</string>
    <string name="get_user_row_by_recovery_hash">SELECT * FROM cusers WHERE recovery_hash=$1 LIMIT 1</string>
    <string name="get_user_password_hash_time">SELECT recovery_time from cusers WHERE recovery_hash=$1</string>
    <string name="get_email_hash">SELECT id from cusers_additional_email WHERE validation_hash=$1</string>
    <string name="get_user_email_by_email">SELECT email FROM cusers WHERE email=$1</string>
<!--    <string name="get_user_emails_by_id">SELECT u.email, true as validated FROM cusers u WHERE u.id=$1 UNION SELECT e.email, e.validated FROM cusers_additional_email e WHERE e.user_id=$1</string>-->
		<string name="get_user_emails_by_id">SELECT email, add_email, true as validated FROM cusers WHERE id=$1</string>

    <string name="user_registration">INSERT INTO cusers (username, username_clean, password, email, date_of_birth, gender, country, city, ip_registered, status, auth_token, language) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) RETURNING id</string>
    <string name="delete_user_by_id">DELETE FROM cusers WHERE id=$1</string>
    <string name="delete_user_additional_email">DELETE FROM cusers WHERE email=$1</string>
    <string name="delete_user_email_from_additional_email_by_user_email">DELETE FROM cusers_additional_email WHERE email=(SELECT email FROM cusers WHERE id=$1)</string>
    <string name="update_recovery_hash_recovery_time_by_id">UPDATE cusers SET recovery_hash=$1, recovery_time=$2 WHERE id=$3</string>
    <string name="update_email_validation_hash_by_email_and_id">UPDATE cusers_additional_email SET validation_hash=$1 WHERE email=$2 AND user_id=$3</string>
    <string name="update_user_email_from_additional_email_by_user_email">UPDATE cusers SET email=(SELECT email FROM cusers_additional_email WHERE user_id=$1 LIMIT 1) WHERE id=$1</string> <!-- hkajläsdfalösjkfä -->    
    <string name="update_user_email">UPDATE cusers SET email=$2 WHERE id=$1</string>
    <string name="update_add_user_email">UPDATE cusers SET add_email=$2, add_email_validated = FALSE WHERE id=$1</string>
    <string name="validate_email_by_hash">UPDATE cusers SET add_email_validated='t', add_email_validation_hash='' WHERE add_email_validation_hash=$1</string>
    
    <string name="update_user_country">UPDATE cusers SET country=$1 WHERE id=$2</string>
    <string name="update_user_city">UPDATE cusers SET city=$1 WHERE id=$2</string>
    <string name="update_user_birth">UPDATE cusers SET date_of_birth=$1 WHERE id=$2</string>
    <string name="update_user_gender">UPDATE cusers SET gender=$1 WHERE id=$2</string>
    <string name="update_user_language_by_id">UPDATE cusers SET language=$1 WHERE id=$2</string>
    <string name="update_avatar_by_id">UPDATE cusers SET avatar=$1 WHERE id=$2</string>
    
    <string name="update_password_by_username">UPDATE cusers SET password=$1, auth_token=$3, recovery_hash=NULL, recovery_time=NULL WHERE username_clean=$2</string>
    <string name="update_auth_token">UPDATE cusers SET auth_token=$1 WHERE id=$2</string>
    <string name="delete_user_birth">UPDATE cusers SET date_of_birth=NULL WHERE id=$1</string>
    
    
    <string name="admin_block_user">INSERT INTO blocked_cusers (user_id, user_name) VALUES ($1, $2)</string>
    <string name="admin_block_user_id">INSERT INTO blocked_cusers (user_id) VALUES ($1)</string>
    <string name="admin_block_username">INSERT INTO blocked_cusers (user_name) VALUES ($1)</string>
    <string name="admin_unblock_user">DELETE FROM blocked_cusers WHERE user_id=$1 AND user_name=$2</string>
    <string name="admin_unblock_username">DELETE FROM blocked_cusers WHERE user_name=$1</string>
    <string name="admin_unblock_user_id">DELETE FROM blocked_cusers WHERE user_id=$1</string>
    <string name="admin_is_blocked_user">SELECT * FROM blocked_cusers WHERE user_id=$1 AND user_name=$2</string>
    <string name="admin_is_blocked_user_by_id">SELECT b.user_id FROM blocked_cusers b WHERE b.user_id=$1</string>
    <string name="get_all_blocked_users">SELECT * FROM blocked_cusers</string>
    <string name="get_all_users">SELECT u.*, (select min(b.user_id) from blocked_cusers b where b.user_id = u.id) user_id FROM cusers u ORDER BY id ASC</string>
    <string name="get_user_by_id">SELECT * FROM cusers WHERE id=$1</string>

    <string name="admin_block_ip">INSERT INTO blocked_ips (ip_address) VALUES ($1)</string>
    <string name="admin_unblock_ip">DELETE FROM blocked_ips WHERE ip_address=$1</string>
    <string name="admin_is_blocked_ip">SELECT * FROM blocked_ips WHERE substr($1, 1, length(ip_address)) = ip_address</string>
    <string name="admin_remove_all_blocked_ips">DELETE FROM blocked_ips</string>
    <string name="get_all_blocked_ips">SELECT * FROM blocked_ips</string>
    
    <string name="save_failed_attempts">SELECT save_failed_attempt($1)</string>
    <string name="reset_failed_attempts">DELETE from blocked_ips_temporary where ip_address = substr($1, 1, length(ip_address))</string>
    <string name="is_ip_blocked_temporarily">SELECT ip_address FROM blocked_ips_temporary WHERE substr($1, 1, length(ip_address)) = ip_address AND blocked_until >= current_timestamp</string>

</statements>
